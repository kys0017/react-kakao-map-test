{"version":3,"sources":["modules/mapSetting.js","components/KakaoMap.jsx","util/map/mapControl.js","components/map/KakaoMapZoomControl.jsx","components/map/KakaoMapTypeControl.jsx","util/map/mapService.js","components/search/SearchList.jsx","util/customAxios.js","api/kakao.js","components/search/SearchBoxRadioButton.jsx","components/search/SearchBoxInput.jsx","components/search/SearchBox.jsx","components/map/KakaoMapCurrentPosition.jsx","components/map/KakaoMapCafeDisplay.jsx","App.js","reportWebVitals.js","modules/index.js","index.js"],"names":["SET_MAP","initialState","map","StyledMapDiv","styled","div","KakaoMap","children","dispatch","useDispatch","container","useRef","useEffect","console","log","options","center","kakao","maps","LatLng","level","Map","current","type","setMap","ref","getCurrentPosition","navigator","Promise","res","rej","geolocation","setCenter","y","x","moveLatLng","setLevel","getLevel","StyledMapZoomControlDiv","KakaoMapZoomControl","kakaoMap","useSelector","state","mapSetting","onClick","StyledMapTypeControlDiv","KakaoMapTypeControl","useState","roadmapCls","setRoadmapCls","skyviewCls","setSkyviewCls","changeMapType","maptype","setMapTypeId","MapTypeId","ROADMAP","HYBRID","setMapType","className","markers","overlay","InfoWindow","zIndex","removable","CustomOverlay","yAnchor","displayMarkerWithInfo","place","marker","Marker","position","clickable","push","addEvent","setContent","makeOverlayContent","setPosition","getPosition","document","querySelector","appendChild","closeBtn","setMarkers","i","length","searchMarker","displaySearchMarker","setMarker","closeEl","createElement","style","top","right","background","color","textAlign","width","fontSize","cursor","textContent","onclick","closeOverlay","title","data","place_name","address_name","road_address_name","handler","event","addListener","removeEvent","removeListener","SearchListDiv","React","memo","iconStyle","height","SearchList","bookmarks","onClickBookmark","onClickClose","size","bodyStyle","display","extra","flex","overflow","itemLayout","dataSource","locale","emptyText","renderItem","item","Item","Meta","description","isbookmark","e","kakaoAxios","axios","create","baseURL","headers","Authorization","getLocalSearchKeyword","keyword","get","SearchBoxRadioButton","onClickRadioButton","checked","setChecked","typeValue","setTypeValue","Group","value","onChange","id","Button","borderRadius","verticalAlign","AiOutlineLoading3QuartersSpin","animationName","animationDuration","animationIterationCount","animationTimingFunction","SearchBoxInput","query","onSelect","onKeyDown","onReset","suffix","setSuffix","onResetValue","useMemo","bordered","headStyle","backgroundColor","selected","option","StyledSearchBox","setResultList","q","resultList","result","key","text","label","SearchBox","setOptions","setData","setQuery","visible","setVisible","setType","setBookmarks","timeout","setTimeout","queryCallApi","clearTimeout","then","documents","hasData","catch","Error","padding","xs","md","lg","xl","flexDirection","keyCode","target","bookmarkIndex","findIndex","bookmark","splice","StyledMapCurrentPositionlDiv","KakaoMapCurrentPosition","setCurrentPosition","a","enableHighAccuracy","coords","latitude","longitude","StyledMapCafeDisplayDiv","KakaoMapCafeDisplay","isClicked","setIsClicked","cafeCls","setCafeCls","code","services","Places","categorySearch","status","pagination","Status","OK","useMapBounds","page","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.deabd46e.chunk.js","sourcesContent":["/* 액션 타입 만들기 */\r\nconst SET_MAP = 'map/SET_MAP';\r\n\r\n/* 액션 생성 함수 만들기 */\r\nexport const setMap = (map) => ({ type: SET_MAP, map });\r\n\r\n/* 초기상태 선언 */\r\nconst initialState = {\r\n    map: null,\r\n};\r\n\r\n/* 리듀서 선언 */\r\nexport default function mapSetting(state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_MAP:\r\n            return {\r\n                ...state,\r\n                map: action.map,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","/*global kakao*/\r\nimport React, { useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setMap } from '../modules/mapSetting';\r\n\r\nconst StyledMapDiv = styled.div`\r\n    position: fixed;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: 0;\r\n`;\r\n\r\nconst KakaoMap = ({ children }) => {\r\n    const dispatch = useDispatch();\r\n    const container = useRef();\r\n\r\n    // map init\r\n    useEffect(() => {\r\n        console.log('map init!');\r\n        const center = new kakao.maps.LatLng('37.50802', '127.062835');\r\n        const options = {\r\n            center,\r\n            level: 3,\r\n        };\r\n        const map = new kakao.maps.Map(container.current, options);\r\n        dispatch(setMap(map));\r\n    }, [dispatch]);\r\n\r\n    return <StyledMapDiv ref={container}>{children}</StyledMapDiv>;\r\n};\r\n\r\nexport default KakaoMap;\r\n","/*global kakao*/\r\n\r\n/**************************\r\n * 지도 기본 컨트롤\r\n * 타입 변경 및 이동 관련\r\n ***************************/\r\n\r\n// 지도타입 변경 (로드맵, 하이브리드)\r\nexport const setMapType = (map, maptype) => {\r\n    if (maptype === 'roadmap') {\r\n        map.setMapTypeId(kakao.maps.MapTypeId.ROADMAP);\r\n    } else {\r\n        map.setMapTypeId(kakao.maps.MapTypeId.HYBRID);\r\n    }\r\n};\r\n\r\n// 현재 위치 가져오기\r\nexport const getCurrentPosition = (option = { enableHighAccuracy: true }) => {\r\n    if ('geolocation' in navigator) {\r\n        /* 위치정보 사용 가능 */\r\n        return new Promise((res, rej) => {\r\n            navigator.geolocation.getCurrentPosition(res, rej);\r\n        });\r\n    } else {\r\n        /* 위치정보 사용 불가능 */\r\n        return null;\r\n    }\r\n};\r\n\r\n// 해당 위치로 이동\r\nexport const setCenter = (map, y, x) => {\r\n    const moveLatLng = new kakao.maps.LatLng(y, x);\r\n    map.setCenter(moveLatLng);\r\n};\r\n\r\nexport const setLevel = (map, level) => {\r\n    map.setLevel(level);\r\n};\r\n\r\nexport const getLevel = (map, level) => {\r\n    return map.getLevel();\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\nimport { AiOutlineMinus, AiOutlinePlus } from 'react-icons/all';\r\nimport { getLevel, setLevel } from '../../util/map/mapControl';\r\n\r\nconst StyledMapZoomControlDiv = styled.div`\r\n    position: absolute;\r\n    bottom: 2rem;\r\n    right: 1rem;\r\n    width: 36px;\r\n    height: 72px;\r\n    overflow: hidden;\r\n    background-color: #f5f5f5;\r\n    z-index: 10;\r\n\r\n    border: 1px solid #919191;\r\n    border-radius: 5px;\r\n\r\n    span {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        width: 36px;\r\n        height: 36px;\r\n        cursor: pointer;\r\n\r\n        svg {\r\n            flex: 1;\r\n            font-size: 22px;\r\n        }\r\n\r\n        &:first-child {\r\n            border-bottom: 1px solid #bfbfbf;\r\n        }\r\n    }\r\n`;\r\n\r\nconst KakaoMapZoomControl = () => {\r\n    const { map: kakaoMap } = useSelector((state) => ({\r\n        map: state.mapSetting.map,\r\n    }));\r\n\r\n    const zoomIn = () => setLevel(kakaoMap, getLevel(kakaoMap) - 1);\r\n    const zoomOut = () => setLevel(kakaoMap, getLevel(kakaoMap) + 1);\r\n\r\n    return (\r\n        <>\r\n            <StyledMapZoomControlDiv>\r\n                <span onClick={zoomIn}>\r\n                    <AiOutlinePlus />\r\n                </span>\r\n                <span onClick={zoomOut}>\r\n                    <AiOutlineMinus />\r\n                </span>\r\n            </StyledMapZoomControlDiv>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default KakaoMapZoomControl;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { GrMapLocation, GrSatellite } from \"react-icons/all\";\r\nimport { setMapType } from \"../../util/map/mapControl\";\r\n\r\nconst StyledMapTypeControlDiv = styled.div`\r\n  display: flex;\r\n  position: absolute;\r\n  top: 1rem;\r\n  right: 1rem;\r\n  width: 130px;\r\n  height: 30px;\r\n  margin: 0;\r\n  padding: 0;\r\n  overflow: hidden;\r\n  z-index: 10;\r\n\r\n  border: 1px solid #919191;\r\n  border-radius: 5px;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    top: 10rem;\r\n  }\r\n\r\n  span {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 65px;\r\n    height: 30px;\r\n    cursor: pointer;\r\n\r\n    svg {\r\n      flex: 1;\r\n      font-size: 22px;\r\n    }\r\n  }\r\n\r\n  .btn {\r\n    background: #fff;\r\n    background: linear-gradient(#fff, #e6e6e6);\r\n\r\n    &:hover {\r\n      background: #f5f5f5;\r\n      background: linear-gradient(#f5f5f5, #e3e3e3);\r\n    }\r\n\r\n    &:active {\r\n      background: #e6e6e6;\r\n      background: linear-gradient(#e6e6e6, #fff);\r\n    }\r\n  }\r\n\r\n  .selected_btn {\r\n    background: #40a9ff;\r\n\r\n    //&:hover {\r\n    //    color: #fff;\r\n    //}\r\n  }\r\n`;\r\n\r\nconst KakaoMapTypeControl = () => {\r\n  const { map: kakaoMap } = useSelector((state) => ({\r\n    map: state.mapSetting.map,\r\n  }));\r\n\r\n  const [roadmapCls, setRoadmapCls] = useState(\"selected_btn\");\r\n  const [skyviewCls, setSkyviewCls] = useState(\"btn\");\r\n\r\n  // 지도타입 컨트롤의 지도 또는 스카이뷰 버튼을 클릭하면 호출되어 지도타입을 바꾸는 함수입니다\r\n  const changeMapType = (maptype) => {\r\n    setMapType(kakaoMap, maptype);\r\n    if (maptype === \"roadmap\") {\r\n      setRoadmapCls(\"selected_btn\");\r\n      setSkyviewCls(\"btn\");\r\n    } else {\r\n      setRoadmapCls(\"btn\");\r\n      setSkyviewCls(\"selected_btn\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StyledMapTypeControlDiv>\r\n        <span className={roadmapCls} onClick={() => changeMapType(\"roadmap\")}>\r\n          <GrMapLocation />\r\n        </span>\r\n        <span className={skyviewCls} onClick={() => changeMapType(\"skyview\")}>\r\n          <GrSatellite />\r\n        </span>\r\n      </StyledMapTypeControlDiv>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default KakaoMapTypeControl;\r\n","/*global kakao*/\r\n\r\n/**************************\r\n * map 라이브러리\r\n **************************/\r\nimport 'antd/dist/antd.css';\r\n\r\n/**\r\n * 카테고리 검색\r\n * @param code 카테고리 코드\r\n * @param map 맵\r\n */\r\nexport const categorySearch = (map, code) => {\r\n    setMarkers(null);\r\n    markers = [];\r\n\r\n    let data = [];\r\n\r\n    const places = new kakao.maps.services.Places(map);\r\n\r\n    const callback = (result, status, pagination) => {\r\n        if (status === kakao.maps.services.Status.OK) {\r\n            data = [...result];\r\n\r\n            for (let i = 0; i < data.length; i++) {\r\n                displayMarkerWithInfo(map, data[i]);\r\n            }\r\n        }\r\n    };\r\n    // 카테고리 코드 검색\r\n    places.categorySearch(code, callback, {\r\n        useMapBounds: true,\r\n        size: 15,\r\n        page: 1,\r\n    });\r\n};\r\n\r\nlet markers = [];\r\n// 마커를 클릭하면 장소명을 표출할 인포윈도우 입니다\r\n\r\nlet infowindow = new kakao.maps.InfoWindow({\r\n    zIndex: 1,\r\n    removable: true,\r\n});\r\nlet overlay = new kakao.maps.CustomOverlay({ zIndex: 3, yAnchor: 1 });\r\n\r\nexport const displayMarkerWithInfo = (map, place) => {\r\n    // 마커를 생성하고 지도에 표시합니다\r\n    const marker = new kakao.maps.Marker({\r\n        map: map,\r\n        position: new kakao.maps.LatLng(place.y, place.x),\r\n        clickable: true, // 마커를 클릭했을 때 지도의 클릭 이벤트가 발생하지 않도록 설정합니다\r\n    });\r\n    markers.push(marker);\r\n\r\n    addEvent(marker, 'click', () => {\r\n        // infowindow.setContent(place.place_name);\r\n        // infowindow.open(map, marker);\r\n        overlay.setMap(map);\r\n        overlay.setContent(makeOverlayContent(place));\r\n        overlay.setPosition(marker.getPosition());\r\n        document.querySelector('.ant-popover-title').appendChild(closeBtn());\r\n    });\r\n};\r\n\r\n// 배열에 추가된 마커들을 지도에 표시하거나 삭제하는 함수입니다\r\nexport const setMarkers = (map) => {\r\n    for (var i = 0; i < markers.length; i++) {\r\n        markers[i].setMap(map);\r\n    }\r\n};\r\n\r\n// 검색리스트 클릭 시 마커 표시\r\nexport let searchMarker = null;\r\nexport const displaySearchMarker = (map, place) => {\r\n    if (!searchMarker) {\r\n        searchMarker = setMarker(map, place);\r\n    } else {\r\n        searchMarker.setPosition(new kakao.maps.LatLng(place.y, place.x));\r\n    }\r\n\r\n    addEvent(searchMarker, 'click', () => {\r\n        overlay.setMap(map);\r\n        overlay.setContent(makeOverlayContent(place));\r\n        overlay.setPosition(searchMarker.getPosition());\r\n        document.querySelector('.ant-popover-title').appendChild(closeBtn());\r\n    });\r\n};\r\n\r\nconst closeBtn = () => {\r\n    let closeEl = document.createElement('span');\r\n    closeEl.className = 'close';\r\n    closeEl.style.position = 'absolute';\r\n    closeEl.style.top = '8px';\r\n    closeEl.style.right = '8px';\r\n    closeEl.style.background = '#000';\r\n    closeEl.style.color = '#fff';\r\n    closeEl.style.textAlign = 'center';\r\n    closeEl.style.width = '15px';\r\n    // closeEl.style.height = '20px';\r\n    closeEl.style.fontSize = 'x-small';\r\n    closeEl.style.cursor = 'default';\r\n    closeEl.textContent = 'X';\r\n    closeEl.onclick = closeOverlay;\r\n    closeEl.title = '닫기';\r\n\r\n    return closeEl;\r\n};\r\n\r\nfunction makeOverlayContent(data) {\r\n    return `\r\n      <div class=\"ant-popover ant-popover-placement-top\" style=\"position: relative; top: -35px; max-width: 270px;\" >\r\n        <div class=\"ant-popover-content\">\r\n          <div class=\"ant-popover-arrow\">\r\n            <span class=\"ant-popover-arrow-content\"></span>\r\n          </div>\r\n          <div class=\"ant-popover-inner\" role=\"tooltip\">\r\n            <div class=\"ant-popover-title\">\r\n              <span style=\"display: inline-block;width: 94%;white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\" title=\"${data.place_name}\">\r\n                ${data.place_name}\r\n              </span> \r\n            </div>\r\n            <div class=\"ant-popover-inner-content\" style=\"font-size: x-small\">\r\n              <div style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\">\r\n                <span title=\"${data.address_name}\">${data.address_name}</span> <br />\r\n                <span title=\"${data.road_address_name}\">${data.road_address_name}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n}\r\n\r\n// // 커스텀 오버레이를 닫기 위해 호출되는 함수입니다\r\nconst closeOverlay = () => overlay.setMap(null);\r\n\r\n// 마커를 생성하고 지도에 표시합니다\r\nexport const setMarker = (map, place) =>\r\n    new kakao.maps.Marker({\r\n        map: map,\r\n        position: new kakao.maps.LatLng(place.y, place.x),\r\n    });\r\n\r\nexport const removeMarkers = () => {\r\n    const marker = new kakao.maps.Marker({\r\n        position: null,\r\n    });\r\n    marker.setMap(null);\r\n};\r\n\r\nexport const addEvent = (map, type, handler) => {\r\n    if (map) kakao.maps.event.addListener(map, type, handler);\r\n};\r\n\r\nexport const removeEvent = (map, type, handler) => {\r\n    if (map) kakao.maps.event.removeListener(map, type, handler);\r\n};\r\n","/*global kakao*/\r\nimport React from \"react\";\r\nimport { Card, List } from \"antd\";\r\nimport styled from \"styled-components\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { setCenter } from \"../../util/map/mapControl\";\r\nimport { BsBookmark, BsBookmarkFill } from \"react-icons/all\";\r\nimport { AiFillCloseSquare } from \"react-icons/ai\";\r\nimport { displaySearchMarker } from \"../../util/map/mapService\";\r\n\r\nconst SearchListDiv = React.memo(styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  height: auto;\r\n  overflow: hidden;\r\n  margin-top: 3px;\r\n  border-radius: 5px;\r\n\r\n  & .ant-card-head-wrapper {\r\n    height: 38px;\r\n  }\r\n\r\n  & .ant-card-extra {\r\n    padding: 0;\r\n    display: flex;\r\n  }\r\n`);\r\n\r\nconst iconStyle = {\r\n  width: \"1.2rem\",\r\n  height: \"1.2rem\",\r\n};\r\n\r\nconst SearchList = ({\r\n  type,\r\n  data,\r\n  bookmarks,\r\n  onClickBookmark,\r\n  onClickClose,\r\n}) => {\r\n  const { map: kakaoMap } = useSelector((state) => ({\r\n    map: state.mapSetting.map,\r\n  }));\r\n\r\n  //   console.log(data);\r\n\r\n  const onClick = (data) => {\r\n    setCenter(kakaoMap, data.y, data.x);\r\n    displaySearchMarker(kakaoMap, data);\r\n  };\r\n\r\n  return (\r\n    <SearchListDiv>\r\n      <Card\r\n        type=\"inner\"\r\n        size=\"small\"\r\n        title={\r\n          type === \"result\"\r\n            ? ` ${data.length || 0} 개의 검색결과`\r\n            : `${bookmarks.length || 0} 개의 북마크  `\r\n        }\r\n        bodyStyle={{ display: \"none\" }}\r\n        extra={\r\n          <AiFillCloseSquare\r\n            style={{ fontSize: \"1.5rem\" }}\r\n            onClick={onClickClose}\r\n          />\r\n        }\r\n      />\r\n      <Card size=\"small\" style={{ flex: 1, height: \"100%\", overflow: \"auto\" }}>\r\n        <List\r\n          itemLayout=\"horizontal\"\r\n          dataSource={type === \"result\" ? data : bookmarks}\r\n          locale={{ emptyText: <div>No data</div> }}\r\n          renderItem={(item) => (\r\n            <List.Item>\r\n              <List.Item.Meta\r\n                title={item.data.place_name}\r\n                description={item.data.road_address_name}\r\n                onClick={() => onClick(item.data)}\r\n                style={{ cursor: \"pointer\" }}\r\n              />\r\n              {item.isbookmark === \"true\" ? (\r\n                <BsBookmarkFill\r\n                  onClick={(e) => onClickBookmark(e, item)}\r\n                  style={iconStyle}\r\n                />\r\n              ) : (\r\n                <BsBookmark\r\n                  onClick={(e) => onClickBookmark(e, item)}\r\n                  style={iconStyle}\r\n                />\r\n              )}\r\n            </List.Item>\r\n          )}\r\n        />\r\n      </Card>\r\n    </SearchListDiv>\r\n  );\r\n};\r\n\r\nexport default React.memo(SearchList);\r\n","import axios from 'axios';\r\n\r\nexport const kakaoAxios = axios.create({\r\n    baseURL: `https://dapi.kakao.com`,\r\n    headers: {\r\n        Authorization: 'KakaoAK 6797801199c3b3d73ff33c7ca3edea88',\r\n    },\r\n});\r\n","import { kakaoAxios } from '../util/customAxios';\r\n\r\n/**\r\n * 키워드로 장소검색\r\n * @param keyword\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\r\nexport const getLocalSearchKeyword = (keyword) =>\r\n    kakaoAxios.get(`/v2/local/search/keyword.json?query=${keyword}`);\r\n\r\n/**\r\n * 카테고리로 장소검색\r\n * @param cate\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\r\nexport const getLocalSearchCategory = (cate) =>\r\n    kakaoAxios.get(\r\n        `/v2/local/search/category.json?category_group_code=${cate}`\r\n    );\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Radio } from \"antd\";\r\nimport { BsBookmark, BsList } from \"react-icons/all\";\r\n\r\nfunction SearchBoxRadioButton({ onClickRadioButton, type }) {\r\n  const [checked, setChecked] = useState(false);\r\n  const [typeValue, setTypeValue] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setChecked(type === \"result\");\r\n    setTypeValue(type);\r\n  }, [type]);\r\n\r\n  return (\r\n    <Radio.Group\r\n      size=\"large\"\r\n      value={typeValue}\r\n      onChange={onClickRadioButton}\r\n      style={{ display: \"flex\" }}\r\n      id=\"radioGroup\"\r\n    >\r\n      <Radio.Button\r\n        value=\"result\"\r\n        style={{\r\n          width: \"100%\",\r\n          textAlign: \"center\",\r\n          borderRadius: \"0 0 0 5px\",\r\n        }}\r\n        id=\"radioButtonResult\"\r\n        checked={checked}\r\n      >\r\n        <BsList\r\n          style={{\r\n            width: \"1.2rem\",\r\n            height: \"1.2rem\",\r\n            verticalAlign: \"middle\",\r\n          }}\r\n        />{\" \"}\r\n        검색결과\r\n      </Radio.Button>\r\n      <Radio.Button\r\n        value=\"bookmark\"\r\n        style={{\r\n          width: \"100%\",\r\n          textAlign: \"center\",\r\n          borderRadius: \"0 0 5px 0\",\r\n        }}\r\n        id=\"radioButtonBookmark\"\r\n        checked={!checked}\r\n      >\r\n        <BsBookmark\r\n          style={{\r\n            width: \"1.2rem\",\r\n            height: \"1.2rem\",\r\n            verticalAlign: \"middle\",\r\n          }}\r\n        />{\" \"}\r\n        북마크\r\n      </Radio.Button>\r\n    </Radio.Group>\r\n  );\r\n}\r\n\r\nexport default SearchBoxRadioButton;\r\n","import React, { useMemo, useState } from \"react\";\r\nimport { AutoComplete, Card, Input } from \"antd\";\r\nimport {\r\n  AiOutlineClose,\r\n  AiOutlineLoading3Quarters,\r\n  AiOutlineSearch,\r\n} from \"react-icons/ai\";\r\n\r\nconst AiOutlineLoading3QuartersSpin = () => (\r\n  <AiOutlineLoading3Quarters\r\n    style={{\r\n      width: \"1.2rem\",\r\n      height: \"1.2rem\",\r\n      animationName: \"rotate\",\r\n      animationDuration: \"1s\",\r\n      animationIterationCount: \"infinite\",\r\n      animationTimingFunction: \"linear\",\r\n    }}\r\n  />\r\n);\r\n\r\nfunction SearchBoxInput({\r\n  query,\r\n  options,\r\n  onChange,\r\n  onSelect,\r\n  onKeyDown,\r\n  onReset,\r\n}) {\r\n  const [suffix, setSuffix] = useState(<AiOutlineSearch />);\r\n\r\n  const onChangeValue = (value) => {\r\n    setSuffix(<AiOutlineLoading3QuartersSpin />);\r\n    onChange(value);\r\n  };\r\n\r\n  const onSelectValue = (selected, option) => {\r\n    onSelect(selected, option);\r\n    setSuffix(<AiOutlineClose onClick={onResetValue} />);\r\n  };\r\n\r\n  const onResetValue = () => {\r\n    onReset();\r\n    setSuffix(<AiOutlineSearch />);\r\n  };\r\n\r\n  useMemo(() => {\r\n    setSuffix(\r\n      options.length > 0 ? (\r\n        <AiOutlineClose onClick={onResetValue} />\r\n      ) : (\r\n        <AiOutlineSearch />\r\n      )\r\n    );\r\n  }, [options]);\r\n\r\n  return (\r\n    <Card\r\n      size=\"small\"\r\n      title=\"REACT-KAKAO-MAP-TEST\"\r\n      //   hoverable\r\n      bordered={false}\r\n      headStyle={{\r\n        backgroundColor: \"rgb(64 169 255)\",\r\n        color: \"#fff\",\r\n        borderRadius: \"5px 5px 0 0\",\r\n      }}\r\n      //   bodyStyle={{\r\n      //     backgroundColor: '#40a9ff',\r\n      //     color: \"#fff\",\r\n      //   }}\r\n    >\r\n      <AutoComplete\r\n        value={query}\r\n        options={options}\r\n        onChange={onChangeValue}\r\n        onSelect={onSelectValue}\r\n        style={{\r\n          width: \"100%\",\r\n        }}\r\n      >\r\n        <Input suffix={suffix} size=\"large\" onKeyDown={onKeyDown} />\r\n      </AutoComplete>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default SearchBoxInput;\r\n","/*global kakao*/\r\nimport React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useSelector } from \"react-redux\";\r\nimport SearchList from \"./SearchList\";\r\nimport { getLocalSearchKeyword } from \"../../api/kakao\";\r\nimport { setCenter } from \"../../util/map/mapControl\";\r\nimport SearchBoxRadioButton from \"./SearchBoxRadioButton\";\r\nimport SearchBoxInput from \"./SearchBoxInput\";\r\nimport { Col, Row } from \"antd\";\r\nimport { displaySearchMarker } from \"../../util/map/mapService\";\r\n\r\nconst StyledSearchBox = React.memo(styled.div`\r\n  svg {\r\n    width: 1.5rem;\r\n    height: 1.5rem;\r\n  }\r\n\r\n  @keyframes rotate {\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n`);\r\n\r\n// options 셋팅\r\nconst setResultList = (q, resultList) =>\r\n  resultList.map((result) => {\r\n    return {\r\n      query: q,\r\n      key: `${result.id}`,\r\n      value: `${result.id}`, // should be unique\r\n      text: `${result.place_name}`,\r\n      data: result,\r\n      isbookmark: \"false\",\r\n      label: (\r\n        <div>\r\n          <span>\r\n            {result.place_name} <br />\r\n            <span style={{ fontSize: \"0.5rem\" }}>\r\n              {result.road_address_name}\r\n            </span>\r\n          </span>\r\n        </div>\r\n      ),\r\n    };\r\n  });\r\n\r\nconst SearchBox = () => {\r\n  const { map: kakaoMap } = useSelector((state) => ({\r\n    map: state.mapSetting.map,\r\n  }));\r\n  const [options, setOptions] = useState([]);\r\n  const [data, setData] = useState([]);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [visible, setVisible] = useState(false);\r\n  const [type, setType] = useState(\"result\");\r\n  const [bookmarks, setBookmarks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      queryCallApi(query);\r\n    }, 300);\r\n    return () => clearTimeout(timeout);\r\n  }, [query]);\r\n\r\n  const queryCallApi = (q) => {\r\n    if (!q) {\r\n      onReset();\r\n      return;\r\n    }\r\n    getLocalSearchKeyword(q)\r\n      .then(({ data: { documents } }) => {\r\n        const hasData = documents.length > 0 ? true : false;\r\n        setOptions(hasData ? setResultList(q, documents) : []);\r\n      })\r\n      .catch((e) => {\r\n        throw new Error(\"키워드 검색 에러!\");\r\n      });\r\n  };\r\n\r\n  const onChange = (value) => setQuery(value);\r\n\r\n  const onSelect = (selected, { text, data }) => {\r\n    // console.log('query: ', query, ' , text:', text);\r\n    setQuery(text);\r\n    setVisible(true);\r\n    if (query === text) setData(options);\r\n    else\r\n      getLocalSearchKeyword(text).then(({ data: { documents } }) =>\r\n        setData(setResultList(text, documents))\r\n      );\r\n\r\n    setCenter(kakaoMap, data.y, data.x);\r\n    displaySearchMarker(kakaoMap, data);\r\n  };\r\n\r\n  const onKeyDown = (e) => {\r\n    if (e.keyCode === 13) {\r\n      setVisible(true);\r\n      setType(\"result\");\r\n\r\n      if (!options[0]?.query && options[0]?.query === query) {\r\n        setData(options);\r\n      } else\r\n        getLocalSearchKeyword(query).then(({ data: { documents } }) =>\r\n          setData(setResultList(query, documents))\r\n        );\r\n    }\r\n  };\r\n\r\n  const onReset = () => {\r\n    setQuery(\"\");\r\n    setOptions([]);\r\n  };\r\n\r\n  const onClose = () => setVisible(false);\r\n\r\n  const onClickRadioButton = (e) => {\r\n    setType(e.target.value);\r\n    setVisible(true);\r\n  };\r\n\r\n  const onClickBookmark = (e, item) => {\r\n    const bookmarkIndex = bookmarks.findIndex(\r\n      (bookmark) => bookmark.value === item.value\r\n    );\r\n\r\n    if (bookmarkIndex === -1) {\r\n      item.isbookmark = \"true\";\r\n      setBookmarks([...bookmarks, item]);\r\n    } else {\r\n      item.isbookmark = \"false\";\r\n      bookmarks.splice(bookmarkIndex, 1);\r\n      setBookmarks([...bookmarks]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Row\r\n        style={{\r\n          flex: \"0 1 0%\",\r\n          height: \"100%\",\r\n          padding: \"10px\",\r\n        }}\r\n      >\r\n        <Col\r\n          xs={24}\r\n          md={12}\r\n          lg={8}\r\n          xl={6}\r\n          style={{\r\n            flex: 1,\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n          }}\r\n        >\r\n          <StyledSearchBox>\r\n            <SearchBoxInput\r\n              query={query}\r\n              options={options}\r\n              onChange={onChange}\r\n              onKeyDown={onKeyDown}\r\n              onSelect={onSelect}\r\n              onReset={onReset}\r\n            />\r\n            <SearchBoxRadioButton\r\n              type={type}\r\n              onClickRadioButton={onClickRadioButton}\r\n            />\r\n          </StyledSearchBox>\r\n          {visible && (\r\n            <SearchList\r\n              type={type}\r\n              data={data}\r\n              bookmarks={bookmarks}\r\n              onClickClose={onClose}\r\n              onClickBookmark={onClickBookmark}\r\n            />\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(SearchBox);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\nimport { BiCurrentLocation } from 'react-icons/all';\r\nimport {\r\n    getCurrentPosition,\r\n    setCenter,\r\n    setLevel,\r\n} from '../../util/map/mapControl';\r\n\r\nconst StyledMapCurrentPositionlDiv = styled.div`\r\n    position: absolute;\r\n    bottom: 7rem;\r\n    right: 1rem;\r\n    width: 36px;\r\n    height: 36px;\r\n    overflow: hidden;\r\n    background-color: #f5f5f5;\r\n    z-index: 10;\r\n\r\n    border: 1px solid #919191;\r\n    border-radius: 5px;\r\n\r\n    span {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        width: 36px;\r\n        height: 36px;\r\n        cursor: pointer;\r\n\r\n        svg {\r\n            flex: 1;\r\n            font-size: 22px;\r\n        }\r\n\r\n        &:first-child {\r\n            border-bottom: 1px solid #bfbfbf;\r\n        }\r\n    }\r\n`;\r\n\r\nconst KakaoMapCurrentPosition = () => {\r\n    const { map: kakaoMap } = useSelector((state) => ({\r\n        map: state.mapSetting.map,\r\n    }));\r\n\r\n    const setCurrentPosition = async () => {\r\n        try {\r\n            const { coords } = await getCurrentPosition({\r\n                enableHighAccuracy: true,\r\n            });\r\n            setCenter(kakaoMap, coords.latitude, coords.longitude);\r\n            setLevel(kakaoMap, 3);\r\n            // displayMarker(\r\n            //     { y: coords.latitude, x: coords.longitude },\r\n            //     kakaoMap\r\n            // );\r\n        } catch (e) {\r\n            throw new Error('set position error!');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <StyledMapCurrentPositionlDiv>\r\n                <span onClick={setCurrentPosition}>\r\n                    <BiCurrentLocation />\r\n                </span>\r\n            </StyledMapCurrentPositionlDiv>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default KakaoMapCurrentPosition;\r\n","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\nimport { FiCoffee } from 'react-icons/all';\r\nimport {\r\n    addEvent,\r\n    categorySearch,\r\n    removeEvent,\r\n    setMarkers,\r\n} from '../../util/map/mapService';\r\n\r\nconst StyledMapCafeDisplayDiv = styled.div`\r\n    position: absolute;\r\n    top: 7rem;\r\n    right: 1rem;\r\n    width: 36px;\r\n    height: 36px;\r\n    overflow: hidden;\r\n    background-color: #f5f5f5;\r\n    z-index: 10;\r\n\r\n    border: 1px solid #919191;\r\n    border-radius: 5px;\r\n\r\n    @media screen and (max-width: 768px) {\r\n        top: 16rem;\r\n    }\r\n\r\n    span {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        width: 36px;\r\n        height: 36px;\r\n        cursor: pointer;\r\n\r\n        svg {\r\n            flex: 1;\r\n            font-size: 22px;\r\n        }\r\n\r\n        &:first-child {\r\n            border-bottom: 1px solid #bfbfbf;\r\n        }\r\n    }\r\n\r\n    .btn {\r\n        background: #fff;\r\n        background: linear-gradient(#fff, #e6e6e6);\r\n\r\n        &:hover {\r\n            background: #f5f5f5;\r\n            background: linear-gradient(#f5f5f5, #e3e3e3);\r\n        }\r\n\r\n        &:active {\r\n            background: #e6e6e6;\r\n            background: linear-gradient(#e6e6e6, #fff);\r\n        }\r\n    }\r\n\r\n    .selected_btn {\r\n        background: #b197fc;\r\n\r\n        //&:hover {\r\n        //    color: #fff;\r\n        //}\r\n    }\r\n`;\r\n\r\nconst KakaoMapCafeDisplay = () => {\r\n    const { map: kakaoMap } = useSelector((state) => ({\r\n        map: state.mapSetting.map,\r\n    }));\r\n\r\n    const [isClicked, setIsClicked] = useState(false);\r\n    const [cafeCls, setCafeCls] = useState('btn');\r\n\r\n    // 버튼 클릭 시 토글\r\n    const onClick = () => {\r\n        setIsClicked(!isClicked);\r\n    };\r\n\r\n    const handler = () => {\r\n        categorySearch(kakaoMap, 'CE7');\r\n    };\r\n    // 버튼 클릭 시 지도에 카페 위치 마커 표시\r\n\r\n    // 토글 on 일 때 지도 이동할 떄마다 현재 bound 에만 마커 표시\r\n    useEffect(() => {\r\n        if (!kakaoMap) return;\r\n        if (isClicked) {\r\n            setCafeCls('selected_btn');\r\n            handler();\r\n            addEvent(kakaoMap, 'dragend', handler);\r\n            addEvent(kakaoMap, 'zoom_changed', handler);\r\n            addEvent(kakaoMap, 'center_changed', handler);\r\n        } else {\r\n            setCafeCls('btn');\r\n        }\r\n\r\n        return () => {\r\n            // console.log('카페 버튼 컴포넌트 언마운트!');\r\n            setMarkers(null);\r\n            removeEvent(kakaoMap, 'dragend', handler);\r\n            removeEvent(kakaoMap, 'zoom_changed', handler);\r\n            removeEvent(kakaoMap, 'center_changed', handler);\r\n        };\r\n    }, [isClicked]);\r\n\r\n    return (\r\n        <>\r\n            <StyledMapCafeDisplayDiv>\r\n                <span className={cafeCls} onClick={onClick}>\r\n                    <FiCoffee />\r\n                </span>\r\n            </StyledMapCafeDisplayDiv>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default KakaoMapCafeDisplay;\r\n","import React from 'react';\r\nimport KakaoMap from './components/KakaoMap';\r\nimport KakaoMapZoomControl from './components/map/KakaoMapZoomControl';\r\nimport KakaoMapTypeControl from './components/map/KakaoMapTypeControl';\r\nimport SearchBox from './components/search/SearchBox';\r\nimport KakaoMapCurrentPosition from './components/map/KakaoMapCurrentPosition';\r\nimport KakaoMapCafeDisplay from './components/map/KakaoMapCafeDisplay';\r\n\r\nfunction App() {\r\n    return (\r\n        <>\r\n            <KakaoMap>\r\n                <KakaoMapCafeDisplay />\r\n                <KakaoMapCurrentPosition />\r\n                <KakaoMapTypeControl />\r\n                <KakaoMapZoomControl />\r\n            </KakaoMap>\r\n            <SearchBox />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(\r\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n                getCLS(onPerfEntry);\r\n                getFID(onPerfEntry);\r\n                getFCP(onPerfEntry);\r\n                getLCP(onPerfEntry);\r\n                getTTFB(onPerfEntry);\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { combineReducers } from 'redux';\r\nimport mapSetting from './mapSetting';\r\n\r\nconst rootReducer = combineReducers({\r\n    mapSetting,\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { createStore } from 'redux';\r\nimport rootReducer from './modules';\r\nimport { Provider } from 'react-redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension'; // 리덕스 개발자 도구\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n// composeWithDevTools 를 사용하여 리덕스 개발자 도구 활성화\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}