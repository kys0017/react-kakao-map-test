{"version":3,"sources":["modules/mapSetting.js","components/KakaoMap.jsx","util/map/mapControl.js","components/map/KakaoMapZoomControl.jsx","components/map/KakaoMapTypeControl.jsx","components/search/SearchList.jsx","util/customAxios.js","api/kakao.js","components/search/SearchBoxRadioButton.jsx","components/search/SearchBoxInput.jsx","components/search/SearchBox.jsx","components/map/KakaoMapCurrentPosition.jsx","util/map/mapService.js","components/map/KakaoMapCafeDisplay.jsx","App.js","reportWebVitals.js","modules/index.js","index.js"],"names":["SET_MAP","initialState","map","StyledMapDiv","styled","div","KakaoMap","children","dispatch","useDispatch","container","useRef","useEffect","console","log","options","center","kakao","maps","LatLng","level","Map","current","type","setMap","ref","getCurrentPosition","navigator","Promise","res","rej","geolocation","setCenter","y","x","moveLatLng","marker","setMarker","latLng","setPosition","Marker","position","setLevel","getLevel","StyledMapZoomControlDiv","KakaoMapZoomControl","kakaoMap","useSelector","state","mapSetting","onClick","StyledMapTypeControlDiv","KakaoMapTypeControl","useState","roadmapCls","setRoadmapCls","skyviewCls","setSkyviewCls","roadmapControl","skyviewControl","changeMapType","maptype","setMapTypeId","MapTypeId","ROADMAP","HYBRID","setMapType","className","SearchListDiv","React","memo","SearchList","data","onClickClose","bookmarks","setBookmarks","onClickBookmark","e","item","bookmarkIndex","findIndex","bookmark","value","isbookmark","splice","size","title","bodyStyle","display","extra","style","fontSize","overflow","itemLayout","dataSource","locale","emptyText","renderItem","Item","Meta","place_name","description","road_address_name","cursor","width","height","kakaoAxios","axios","create","baseURL","headers","Authorization","getLocalSearchKeyword","keyword","get","SearchBoxRadioButton","onClickRadioButton","Group","defaultValue","onChange","Button","textAlign","verticalAlign","AiOutlineLoading3QuartersSpin","animationName","animationDuration","animationIterationCount","animationTimingFunction","SearchBoxInput","query","onSelect","onKeyDown","onReset","suffix","setSuffix","onResetValue","useMemo","length","borderRadius","headStyle","backgroundColor","color","selected","option","StyledSearchBox","setResultList","q","resultList","result","key","id","text","label","SearchBox","setOptions","setData","setQuery","visible","setVisible","setType","timeout","setTimeout","queryCallApi","clearTimeout","then","documents","hasData","catch","Error","keyCode","target","StyledMapCurrentPositionlDiv","KakaoMapCurrentPosition","setCurrentPosition","a","enableHighAccuracy","coords","latitude","longitude","markers","infowindows","displayMarker","place","push","infowindow","InfoWindow","zIndex","setContent","event","addListener","makeOverListener","makeOutListener","open","close","setMarkers","i","StyledMapCafeDisplayDiv","KakaoMapCafeDisplay","isClicked","setIsClicked","handler","code","services","Places","categorySearch","status","Status","OK","useMapBounds","page","addEvent","removeListener","removeEvent","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cc82d54f.chunk.js","sourcesContent":["/* 액션 타입 만들기 */\nconst SET_MAP = 'map/SET_MAP';\n\n/* 액션 생성 함수 만들기 */\nexport const setMap = (map) => ({ type: SET_MAP, map });\n\n/* 초기상태 선언 */\nconst initialState = {\n    map: null,\n};\n\n/* 리듀서 선언 */\nexport default function mapSetting(state = initialState, action) {\n    switch (action.type) {\n        case SET_MAP:\n            return {\n                ...state,\n                map: action.map,\n            };\n        default:\n            return state;\n    }\n}\n","/*global kakao*/\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { setMap } from '../modules/mapSetting';\n\nconst StyledMapDiv = styled.div`\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    z-index: 0;\n`;\n\nconst KakaoMap = ({ children }) => {\n    const dispatch = useDispatch();\n    const container = useRef();\n\n    // map init\n    useEffect(() => {\n        console.log('map init!');\n        const center = new kakao.maps.LatLng('37.50802', '127.062835');\n        const options = {\n            center,\n            level: 3,\n        };\n        const map = new kakao.maps.Map(container.current, options);\n        dispatch(setMap(map));\n    }, [dispatch]);\n\n    return <StyledMapDiv ref={container}>{children}</StyledMapDiv>;\n};\n\nexport default KakaoMap;\n","/*global kakao*/\n\n// 지도 기본 컨트롤\n\n// 지도타입 변경 (로드맵, 하이브리드)\nexport const setMapType = (map, maptype) => {\n    if (maptype === 'roadmap') {\n        map.setMapTypeId(kakao.maps.MapTypeId.ROADMAP);\n    } else {\n        map.setMapTypeId(kakao.maps.MapTypeId.HYBRID);\n    }\n};\n\n// 현재 위치 가져오기\nexport const getCurrentPosition = (option = { enableHighAccuracy: true }) => {\n    if ('geolocation' in navigator) {\n        /* 위치정보 사용 가능 */\n        return new Promise((res, rej) => {\n            navigator.geolocation.getCurrentPosition(res, rej);\n        });\n    } else {\n        /* 위치정보 사용 불가능 */\n        return null;\n    }\n};\n\n// 해당 위치로 이동\nexport const setCenter = (map, y, x) => {\n    const moveLatLng = new kakao.maps.LatLng(y, x);\n    map.setCenter(moveLatLng);\n};\n\n// 마커 표시\nexport let marker = null;\nexport const setMarker = (map, y, x) => {\n    const latLng = new kakao.maps.LatLng(y, x);\n    if (!marker) {\n        // 마커 없으면 생성\n        marker = new kakao.maps.Marker({\n            position: latLng,\n        });\n        marker.setMap(map);\n    } else {\n        // 있으면 마커 위치 변경\n        marker.setPosition(latLng);\n    }\n};\n\nexport const removeMarkers = () => {\n    const marker = new kakao.maps.Marker({\n        position: null,\n    });\n    marker.setMap(null);\n};\n\nexport const setLevel = (map, level) => {\n    map.setLevel(map.getLevel() + level);\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { AiOutlineMinus, AiOutlinePlus } from 'react-icons/all';\nimport { setLevel } from '../../util/map/mapControl';\n\nconst StyledMapZoomControlDiv = styled.div`\n    position: absolute;\n    bottom: 2rem;\n    right: 1rem;\n    width: 36px;\n    height: 72px;\n    overflow: hidden;\n    background-color: #f5f5f5;\n    z-index: 10;\n\n    border: 1px solid #919191;\n    border-radius: 5px;\n\n    span {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        width: 36px;\n        height: 36px;\n        cursor: pointer;\n\n        svg {\n            flex: 1;\n            font-size: 22px;\n        }\n\n        &:first-child {\n            border-bottom: 1px solid #bfbfbf;\n        }\n    }\n`;\n\nconst KakaoMapZoomControl = () => {\n    const { map: kakaoMap } = useSelector((state) => ({\n        map: state.mapSetting.map,\n    }));\n\n    const zoomIn = () => setLevel(kakaoMap, -1);\n    const zoomOut = () => setLevel(kakaoMap, 1);\n\n    return (\n        <>\n            <StyledMapZoomControlDiv>\n                <span onClick={zoomIn}>\n                    <AiOutlinePlus />\n                </span>\n                <span onClick={zoomOut}>\n                    <AiOutlineMinus />\n                </span>\n            </StyledMapZoomControlDiv>\n        </>\n    );\n};\n\nexport default KakaoMapZoomControl;\n","import React, { useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { GrMapLocation, GrSatellite } from 'react-icons/all';\nimport { setMapType } from '../../util/map/mapControl';\n\nconst StyledMapTypeControlDiv = styled.div`\n    display: flex;\n    position: absolute;\n    top: 1rem;\n    right: 1rem;\n    width: 130px;\n    height: 30px;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    z-index: 10;\n\n    border: 1px solid #919191;\n    border-radius: 5px;\n\n    span {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        width: 65px;\n        height: 30px;\n        cursor: pointer;\n\n        svg {\n            flex: 1;\n            font-size: 22px;\n        }\n    }\n\n    .btn {\n        background: #fff;\n        background: linear-gradient(#fff, #e6e6e6);\n\n        &:hover {\n            background: #f5f5f5;\n            background: linear-gradient(#f5f5f5, #e3e3e3);\n        }\n\n        &:active {\n            background: #e6e6e6;\n            background: linear-gradient(#e6e6e6, #fff);\n        }\n    }\n\n    .selected_btn {\n        //color: #fff;\n        background: #40a9ff;\n        //background: linear-gradient(#08979c, #13c2c2);\n\n        &:hover {\n            color: #fff;\n        }\n    }\n`;\n\nconst KakaoMapTypeControl = () => {\n    const { map: kakaoMap } = useSelector((state) => ({\n        map: state.mapSetting.map,\n    }));\n\n    const [roadmapCls, setRoadmapCls] = useState('selected_btn');\n    const [skyviewCls, setSkyviewCls] = useState('btn');\n\n    const roadmapControl = useRef();\n    const skyviewControl = useRef();\n\n    // 지도타입 컨트롤의 지도 또는 스카이뷰 버튼을 클릭하면 호출되어 지도타입을 바꾸는 함수입니다\n    const changeMapType = (maptype) => {\n        // console.log(roadmapControl);\n        setMapType(kakaoMap, maptype);\n        if (maptype === 'roadmap') {\n            setRoadmapCls('selected_btn');\n            setSkyviewCls('btn');\n        } else {\n            setRoadmapCls('btn');\n            setSkyviewCls('selected_btn');\n        }\n    };\n\n    return (\n        <>\n            <StyledMapTypeControlDiv>\n                <span\n                    className={roadmapCls}\n                    onClick={() => changeMapType('roadmap')}\n                    ref={roadmapControl}\n                >\n                    <GrMapLocation />\n                </span>\n                <span\n                    className={skyviewCls}\n                    onClick={() => changeMapType('skyview')}\n                    ref={skyviewControl}\n                >\n                    <GrSatellite />\n                </span>\n            </StyledMapTypeControlDiv>\n        </>\n    );\n};\n\nexport default KakaoMapTypeControl;\n","/*global kakao*/\nimport React, { useState } from 'react';\nimport { Card, List } from 'antd';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { setCenter, setMarker } from '../../util/map/mapControl';\nimport { BsBookmark, BsBookmarkFill } from 'react-icons/all';\nimport { AiFillCloseSquare } from 'react-icons/ai';\n\nconst SearchListDiv = React.memo(styled.div`\n    display: flex;\n    padding: 5px;\n    flex: 1;\n    flex-direction: column;\n    width: 350px;\n    height: auto;\n    border-radius: 10px;\n    background: rgba(10, 123, 192, 0.3);\n\n    position: absolute;\n    top: 160px;\n    left: 10px;\n    bottom: 10px;\n    z-index: 5;\n`);\n\nconst SearchList = ({ type, data, onClickClose }) => {\n    const { map: kakaoMap } = useSelector((state) => ({\n        map: state.mapSetting.map,\n    }));\n\n    const [bookmarks, setBookmarks] = useState([]);\n\n    const onClick = (y, x) => {\n        setCenter(kakaoMap, y, x);\n        setMarker(kakaoMap, y, x);\n    };\n\n    const onClickBookmark = (e, item) => {\n        const bookmarkIndex = bookmarks.findIndex(\n            (bookmark) => bookmark.value === item.value\n        );\n\n        if (bookmarkIndex === -1) {\n            item.isbookmark = 'true';\n            setBookmarks([...bookmarks, item]);\n        } else {\n            item.isbookmark = 'false';\n            bookmarks.splice(bookmarkIndex, 1);\n            setBookmarks([...bookmarks]);\n        }\n    };\n\n    return (\n        <SearchListDiv>\n            <Card\n                type=\"inner\"\n                size=\"small\"\n                title={type === 'result' ? '검색결과' : '북마크'}\n                bodyStyle={{ display: 'none' }}\n                extra={\n                    <AiFillCloseSquare\n                        style={{ fontSize: '1.5rem' }}\n                        onClick={onClickClose}\n                    />\n                }\n            />\n            <Card size=\"small\" style={{ overflow: 'auto' }}>\n                <List\n                    itemLayout=\"horizontal\"\n                    dataSource={type === 'result' ? data : bookmarks}\n                    locale={{ emptyText: <div>dddd</div> }}\n                    renderItem={(item) => (\n                        <List.Item>\n                            <List.Item.Meta\n                                title={item.data.place_name}\n                                description={item.data.road_address_name}\n                                onClick={() =>\n                                    onClick(item.data.y, item.data.x)\n                                }\n                                style={{ cursor: 'pointer' }}\n                            />\n                            {item.isbookmark === 'true' ? (\n                                <BsBookmarkFill\n                                    onClick={(e) => onClickBookmark(e, item)}\n                                    style={{\n                                        width: '1.2rem',\n                                        height: '1.2rem',\n                                    }}\n                                />\n                            ) : (\n                                <BsBookmark\n                                    onClick={(e) => onClickBookmark(e, item)}\n                                    style={{\n                                        width: '1.2rem',\n                                        height: '1.2rem',\n                                    }}\n                                />\n                            )}\n                        </List.Item>\n                    )}\n                />\n            </Card>\n        </SearchListDiv>\n    );\n};\n\nexport default React.memo(SearchList);\n","import axios from 'axios';\n\nexport const kakaoAxios = axios.create({\n    baseURL: `https://dapi.kakao.com`,\n    headers: {\n        Authorization: 'KakaoAK 6797801199c3b3d73ff33c7ca3edea88',\n    },\n});\n","import { kakaoAxios } from '../util/customAxios';\n\n/**\n * 키워드로 장소검색\n * @param keyword\n * @returns {Promise<AxiosResponse<any>>}\n */\nexport const getLocalSearchKeyword = (keyword) =>\n    kakaoAxios.get(`/v2/local/search/keyword.json?query=${keyword}`);\n\n/**\n * 카테고리로 장소검색\n * @param cate\n * @returns {Promise<AxiosResponse<any>>}\n */\nexport const getLocalSearchCategory = (cate) =>\n    kakaoAxios.get(\n        `/v2/local/search/category.json?category_group_code=${cate}`\n    );\n","import React from 'react';\nimport { Radio } from 'antd';\nimport { BsBookmark, BsList } from 'react-icons/all';\n\nfunction SearchBoxRadioButton({ onClickRadioButton }) {\n    return (\n        <Radio.Group\n            size=\"large\"\n            defaultValue=\"result\"\n            onChange={onClickRadioButton}\n            style={{ display: 'inline-flex' }}\n        >\n            <Radio.Button\n                value=\"result\"\n                style={{\n                    width: '100%',\n                    textAlign: 'center',\n                }}\n            >\n                <BsList\n                    style={{\n                        width: '1.2rem',\n                        height: '1.2rem',\n                        verticalAlign: 'middle',\n                    }}\n                />{' '}\n                검색결과\n            </Radio.Button>\n            <Radio.Button\n                value=\"bookmark\"\n                style={{\n                    width: '100%',\n                    textAlign: 'center',\n                }}\n            >\n                <BsBookmark\n                    style={{\n                        width: '1.2rem',\n                        height: '1.2rem',\n                        verticalAlign: 'middle',\n                    }}\n                />{' '}\n                북마크\n            </Radio.Button>\n        </Radio.Group>\n    );\n}\n\nexport default SearchBoxRadioButton;\n","import React, { useMemo, useState } from 'react';\nimport { AutoComplete, Card, Input } from 'antd';\nimport {\n    AiOutlineClose,\n    AiOutlineLoading3Quarters,\n    AiOutlineSearch,\n} from 'react-icons/ai';\n\nconst AiOutlineLoading3QuartersSpin = () => (\n    <AiOutlineLoading3Quarters\n        style={{\n            width: '1.2rem',\n            height: '1.2rem',\n            animationName: 'rotate',\n            animationDuration: '1s',\n            animationIterationCount: 'infinite',\n            animationTimingFunction: 'linear',\n        }}\n    />\n);\n\nfunction SearchBoxInput({\n    query,\n    options,\n    onChange,\n    onSelect,\n    onKeyDown,\n    onReset,\n}) {\n    const [suffix, setSuffix] = useState(<AiOutlineSearch />);\n\n    const onChangeValue = (value) => {\n        setSuffix(<AiOutlineLoading3QuartersSpin />);\n        onChange(value);\n    };\n\n    const onSelectValue = (selected, option) => {\n        onSelect(selected, option);\n        setSuffix(<AiOutlineClose onClick={onResetValue} />);\n    };\n\n    const onResetValue = () => {\n        onReset();\n        setSuffix(<AiOutlineSearch />);\n    };\n\n    useMemo(() => {\n        setSuffix(\n            options.length > 0 ? (\n                <AiOutlineClose onClick={onResetValue} />\n            ) : (\n                <AiOutlineSearch />\n            )\n        );\n    }, [options]);\n\n    return (\n        <Card\n            size=\"small\"\n            title=\"REACT-KAKAO-MAP-TEST\"\n            style={{ borderRadius: '10px 10px 0 0' }}\n            headStyle={{\n                backgroundColor: 'gray',\n                color: '#fff',\n                borderRadius: '10px 10px 0 0',\n            }}\n        >\n            <AutoComplete\n                value={query}\n                options={options}\n                onChange={onChangeValue}\n                onSelect={onSelectValue}\n                style={{\n                    width: '100%',\n                }}\n            >\n                <Input suffix={suffix} size=\"large\" onKeyDown={onKeyDown} />\n            </AutoComplete>\n        </Card>\n    );\n}\n\nexport default SearchBoxInput;\n","/*global kakao*/\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport SearchList from './SearchList';\nimport { getLocalSearchKeyword } from '../../api/kakao';\nimport { setCenter, setMarker } from '../../util/map/mapControl';\nimport SearchBoxRadioButton from './SearchBoxRadioButton';\nimport SearchBoxInput from './SearchBoxInput';\n\nconst StyledSearchBox = React.memo(styled.div`\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    width: 350px;\n\n    position: absolute;\n    top: 10px;\n    left: 10px;\n    z-index: 10;\n\n    svg {\n        width: 1.5rem;\n        height: 1.5rem;\n    }\n\n    @keyframes rotate {\n        100% {\n            transform: rotate(360deg);\n        }\n    }\n`);\n\n// options 셋팅\nconst setResultList = (q, resultList) =>\n    resultList.map((result) => {\n        return {\n            query: q,\n            key: `${result.id}`,\n            value: `${result.id}`, // should be unique\n            text: `${result.place_name}`,\n            data: result,\n            isbookmark: 'false',\n            label: (\n                <div>\n                    <span>\n                        {result.place_name} <br />\n                        <span style={{ fontSize: '0.5rem' }}>\n                            {result.road_address_name}\n                        </span>\n                    </span>\n                </div>\n            ),\n        };\n    });\n\nconst SearchBox = () => {\n    const { map: kakaoMap } = useSelector((state) => ({\n        map: state.mapSetting.map,\n    }));\n    const [options, setOptions] = useState([]);\n    const [data, setData] = useState([]);\n    const [query, setQuery] = useState('');\n    const [visible, setVisible] = useState(false);\n    const [type, setType] = useState('result');\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            queryCallApi(query);\n        }, 300);\n        return () => clearTimeout(timeout);\n    }, [query]);\n\n    const queryCallApi = (q) => {\n        if (!q) {\n            onReset();\n            return;\n        }\n        getLocalSearchKeyword(q)\n            .then(({ data: { documents } }) => {\n                const hasData = documents.length > 0 ? true : false;\n                setOptions(hasData ? setResultList(q, documents) : []);\n            })\n            .catch((e) => {\n                throw new Error('키워드 검색 에러!');\n            });\n    };\n\n    const onChange = (value) => setQuery(value);\n\n    const onSelect = (selected, { text, data }) => {\n        // console.log('query: ', query, ' , text:', text);\n        setQuery(text);\n        setVisible(true);\n        if (query === text) setData(options);\n        else\n            getLocalSearchKeyword(text).then(({ data: { documents } }) =>\n                setData(setResultList(text, documents))\n            );\n\n        setCenter(kakaoMap, data.y, data.x);\n        setMarker(kakaoMap, data.y, data.x);\n    };\n\n    const onKeyDown = (e) => {\n        if (e.keyCode === 13) {\n            setVisible(true);\n            // console.log('query: ', query, ' , value:', e.target.value);\n            if (!options[0]?.query && options[0]?.query === query) {\n                setData(options);\n            } else\n                getLocalSearchKeyword(query).then(({ data: { documents } }) =>\n                    setData(setResultList(query, documents))\n                );\n        }\n    };\n\n    const onReset = () => {\n        setQuery('');\n        setOptions([]);\n    };\n\n    const onClose = () => setVisible(false);\n\n    const onClickRadioButton = (e) => {\n        setType(e.target.value);\n        setVisible(true);\n    };\n\n    return (\n        <>\n            <StyledSearchBox>\n                <SearchBoxInput\n                    query={query}\n                    options={options}\n                    onChange={onChange}\n                    onKeyDown={onKeyDown}\n                    onSelect={onSelect}\n                    onReset={onReset}\n                />\n                <SearchBoxRadioButton onClickRadioButton={onClickRadioButton} />\n            </StyledSearchBox>\n            {visible && (\n                <>\n                    <SearchList\n                        type={type}\n                        data={data}\n                        onClickClose={onClose}\n                    />\n                </>\n            )}\n        </>\n    );\n};\n\nexport default React.memo(SearchBox);\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { BiCurrentLocation } from 'react-icons/all';\nimport {\n    getCurrentPosition,\n    setCenter,\n    setMarker,\n} from '../../util/map/mapControl';\n\nconst StyledMapCurrentPositionlDiv = styled.div`\n    position: absolute;\n    bottom: 7rem;\n    right: 1rem;\n    width: 36px;\n    height: 36px;\n    overflow: hidden;\n    background-color: #f5f5f5;\n    z-index: 10;\n\n    border: 1px solid #919191;\n    border-radius: 5px;\n\n    span {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        width: 36px;\n        height: 36px;\n        cursor: pointer;\n\n        svg {\n            flex: 1;\n            font-size: 22px;\n        }\n\n        &:first-child {\n            border-bottom: 1px solid #bfbfbf;\n        }\n    }\n`;\n\nconst KakaoMapCurrentPosition = () => {\n    const { map: kakaoMap } = useSelector((state) => ({\n        map: state.mapSetting.map,\n    }));\n\n    const setCurrentPosition = async () => {\n        try {\n            const { coords } = await getCurrentPosition({\n                enableHighAccuracy: true,\n            });\n            setCenter(kakaoMap, coords.latitude, coords.longitude);\n            setMarker(kakaoMap, coords.latitude, coords.longitude);\n        } catch (e) {\n            throw new Error('set position error!');\n        }\n    };\n\n    return (\n        <>\n            <StyledMapCurrentPositionlDiv>\n                <span onClick={setCurrentPosition}>\n                    <BiCurrentLocation />\n                </span>\n            </StyledMapCurrentPositionlDiv>\n        </>\n    );\n};\n\nexport default KakaoMapCurrentPosition;\n","/*global kakao*/\n\n// map 라이브러리\n\n/**\n * 카테고리 검색\n * @param code 카테고리 코드\n * @param map 맵\n */\nexport const categorySearch = (map, code) => {\n    setMarkers(null);\n    // console.log(markers);\n    markers = [];\n    infowindows = [];\n\n    const places = new kakao.maps.services.Places(map);\n\n    const callback = (result, status) => {\n        if (status === kakao.maps.services.Status.OK) {\n            console.log(result);\n            for (let i = 0; i < result.length; i++) {\n                displayMarker(result[i], map);\n            }\n        }\n    };\n    // 카테고리 코드 검색\n    places.categorySearch(code, callback, {\n        useMapBounds: true,\n        size: 15,\n        page: 1,\n    });\n};\n\nlet markers = [];\n// 마커를 클릭하면 장소명을 표출할 인포윈도우 입니다\nlet infowindows = [];\n// 지도에 마커를 표시하는 함수입니다\nconst displayMarker = (place, map) => {\n    // 마커를 생성하고 지도에 표시합니다\n    const marker = new kakao.maps.Marker({\n        map: map,\n        position: new kakao.maps.LatLng(place.y, place.x),\n    });\n    markers.push(marker);\n\n    const infowindow = new kakao.maps.InfoWindow({ zIndex: 1 });\n    infowindow.setContent(place.place_name);\n    infowindows.push(infowindow);\n\n    kakao.maps.event.addListener(\n        marker,\n        'mouseover',\n        makeOverListener(map, marker, infowindow)\n    );\n    kakao.maps.event.addListener(\n        marker,\n        'mouseout',\n        makeOutListener(infowindow)\n    );\n};\n\n// 인포윈도우를 표시하는 클로저를 만드는 함수입니다\nconst makeOverListener = (map, marker, infowindow) => {\n    return function () {\n        infowindow.open(map, marker);\n    };\n};\n// 인포윈도우를 닫는 클로저를 만드는 함수입니다\nconst makeOutListener = (infowindow) => {\n    return function () {\n        infowindow.close();\n    };\n};\n// 배열에 추가된 마커들을 지도에 표시하거나 삭제하는 함수입니다\nexport const setMarkers = (map) => {\n    for (var i = 0; i < markers.length; i++) {\n        markers[i].setMap(map);\n    }\n};\n\nexport const addEvent = (map, type, handler) => {\n    if (map) kakao.maps.event.addListener(map, type, handler);\n};\n\nexport const removeEvent = (map, type, handler) => {\n    if (map) kakao.maps.event.removeListener(map, type, handler);\n};\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { IoCafe, IoCafeOutline } from 'react-icons/all';\nimport {\n    addEvent,\n    categorySearch,\n    removeEvent,\n    setMarkers,\n} from '../../util/map/mapService';\n\nconst StyledMapCafeDisplayDiv = styled.div`\n    position: absolute;\n    top: 7rem;\n    right: 1rem;\n    width: 36px;\n    height: 36px;\n    overflow: hidden;\n    background-color: #f5f5f5;\n    z-index: 10;\n\n    border: 1px solid #919191;\n    border-radius: 5px;\n\n    span {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        width: 36px;\n        height: 36px;\n        cursor: pointer;\n\n        svg {\n            flex: 1;\n            font-size: 22px;\n        }\n\n        &:first-child {\n            border-bottom: 1px solid #bfbfbf;\n        }\n    }\n`;\n\nconst KakaoMapCafeDisplay = () => {\n    const { map: kakaoMap } = useSelector((state) => ({\n        map: state.mapSetting.map,\n    }));\n    const [isClicked, setIsClicked] = useState(false);\n\n    // 버튼 클릭 시 토글\n    const onClickToggle = () => {\n        setIsClicked(!isClicked);\n    };\n\n    const handler = () => {\n        categorySearch(kakaoMap, 'CE7');\n    };\n    // 버튼 클릭 시 지도에 카페 위치 마커 표시\n\n    // 토글 on 일 때 지도 이동할 떄마다 현재 bound 에만 마커 표시\n    useEffect(() => {\n        if (!kakaoMap) return;\n        if (isClicked) {\n            addEvent(kakaoMap, 'dragend', handler);\n        } else {\n            // setMarkers(null);\n        }\n        console.log(kakaoMap);\n\n        return () => {\n            console.log('카페 버튼 컴포넌트 언마운트!');\n            setMarkers(null);\n            removeEvent(kakaoMap, 'dragend', handler);\n        };\n    }, [isClicked]);\n\n    return (\n        <>\n            <StyledMapCafeDisplayDiv>\n                <span onClick={onClickToggle}>\n                    {isClicked ? <IoCafe /> : <IoCafeOutline />}\n                </span>\n            </StyledMapCafeDisplayDiv>\n        </>\n    );\n};\n\nexport default KakaoMapCafeDisplay;\n","import React from 'react';\nimport KakaoMap from './components/KakaoMap';\nimport KakaoMapZoomControl from './components/map/KakaoMapZoomControl';\nimport KakaoMapTypeControl from './components/map/KakaoMapTypeControl';\nimport SearchBox from './components/search/SearchBox';\nimport KakaoMapCurrentPosition from './components/map/KakaoMapCurrentPosition';\nimport KakaoMapCafeDisplay from './components/map/KakaoMapCafeDisplay';\n\nfunction App() {\n    return (\n        <>\n            <KakaoMap>\n                <KakaoMapCafeDisplay />\n                <KakaoMapCurrentPosition />\n                <KakaoMapTypeControl />\n                <KakaoMapZoomControl />\n            </KakaoMap>\n            <SearchBox />\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\nimport mapSetting from './mapSetting';\n\nconst rootReducer = combineReducers({\n    mapSetting,\n});\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport rootReducer from './modules';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension'; // 리덕스 개발자 도구\n\nconst store = createStore(rootReducer, composeWithDevTools());\n// composeWithDevTools 를 사용하여 리덕스 개발자 도구 활성화\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}