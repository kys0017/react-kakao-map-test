{"version":3,"sources":["modules/mapSetting.js","components/KakaoMap.jsx","util/map/mapControl.js","components/map/KakaoMapZoomControl.jsx","components/map/KakaoMapTypeControl.jsx","util/map/mapService.js","components/search/SearchList.jsx","util/customAxios.js","api/kakao.js","components/search/SearchBoxRadioButton.jsx","components/search/SearchBoxInput.jsx","components/search/SearchBox.jsx","components/map/KakaoMapCurrentPosition.jsx","components/map/KakaoMapCafeDisplay.jsx","App.js","reportWebVitals.js","modules/index.js","index.js"],"names":["SET_MAP","initialState","map","StyledMapDiv","styled","div","KakaoMap","children","dispatch","useDispatch","container","useRef","useEffect","console","log","options","center","kakao","maps","LatLng","level","Map","current","type","setMap","ref","getCurrentPosition","navigator","Promise","res","rej","geolocation","setCenter","y","x","moveLatLng","setLevel","getLevel","StyledMapZoomControlDiv","KakaoMapZoomControl","kakaoMap","useSelector","state","mapSetting","onClick","StyledMapTypeControlDiv","KakaoMapTypeControl","useState","roadmapCls","setRoadmapCls","skyviewCls","setSkyviewCls","changeMapType","maptype","setMapTypeId","MapTypeId","ROADMAP","HYBRID","setMapType","className","markers","overlay","InfoWindow","zIndex","removable","CustomOverlay","yAnchor","displayMarkerWithInfo","place","marker","Marker","position","clickable","push","addEvent","setContent","makeOverlayContent","setPosition","getPosition","document","querySelector","appendChild","closeBtn","setMarkers","i","length","searchMarker","displaySearchMarker","setMarker","closeEl","createElement","style","top","right","background","color","textAlign","width","height","fontSize","cursor","textContent","onclick","closeOverlay","title","data","place_name","address_name","road_address_name","handler","event","addListener","removeEvent","removeListener","SearchListDiv","React","memo","iconStyle","SearchList","bookmarks","onClickBookmark","onClickClose","size","bodyStyle","display","extra","flex","overflow","itemLayout","dataSource","locale","emptyText","renderItem","item","Item","Meta","description","isbookmark","e","kakaoAxios","axios","create","baseURL","headers","Authorization","getLocalSearchKeyword","keyword","get","SearchBoxRadioButton","onClickRadioButton","checked","setChecked","typeValue","setTypeValue","Group","value","onChange","id","Button","verticalAlign","AiOutlineLoading3QuartersSpin","animationName","animationDuration","animationIterationCount","animationTimingFunction","SearchBoxInput","query","onSelect","onKeyDown","onReset","suffix","setSuffix","onResetValue","useMemo","bordered","headStyle","backgroundColor","selected","option","StyledSearchBox","setResultList","q","resultList","result","key","text","label","SearchBox","setOptions","setData","setQuery","visible","setVisible","setType","setBookmarks","timeout","setTimeout","queryCallApi","clearTimeout","then","documents","hasData","catch","Error","xs","md","lg","xl","flexDirection","keyCode","target","bookmarkIndex","findIndex","bookmark","splice","StyledMapCurrentPositionlDiv","KakaoMapCurrentPosition","setCurrentPosition","a","enableHighAccuracy","coords","latitude","longitude","StyledMapCafeDisplayDiv","KakaoMapCafeDisplay","isClicked","setIsClicked","cafeCls","setCafeCls","code","services","Places","categorySearch","status","pagination","Status","OK","useMapBounds","page","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a1e311ed.chunk.js","sourcesContent":["/* 액션 타입 만들기 */\nconst SET_MAP = 'map/SET_MAP';\n\n/* 액션 생성 함수 만들기 */\nexport const setMap = (map) => ({ type: SET_MAP, map });\n\n/* 초기상태 선언 */\nconst initialState = {\n    map: null,\n};\n\n/* 리듀서 선언 */\nexport default function mapSetting(state = initialState, action) {\n    switch (action.type) {\n        case SET_MAP:\n            return {\n                ...state,\n                map: action.map,\n            };\n        default:\n            return state;\n    }\n}\n","/*global kakao*/\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { setMap } from '../modules/mapSetting';\n\nconst StyledMapDiv = styled.div`\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    z-index: 0;\n`;\n\nconst KakaoMap = ({ children }) => {\n    const dispatch = useDispatch();\n    const container = useRef();\n\n    // map init\n    useEffect(() => {\n        console.log('map init!');\n        const center = new kakao.maps.LatLng('37.50802', '127.062835');\n        const options = {\n            center,\n            level: 3,\n        };\n        const map = new kakao.maps.Map(container.current, options);\n        dispatch(setMap(map));\n    }, [dispatch]);\n\n    return <StyledMapDiv ref={container}>{children}</StyledMapDiv>;\n};\n\nexport default KakaoMap;\n","/*global kakao*/\n\n/**************************\n * 지도 기본 컨트롤\n * 타입 변경 및 이동 관련\n ***************************/\n\n// 지도타입 변경 (로드맵, 하이브리드)\nexport const setMapType = (map, maptype) => {\n    if (maptype === 'roadmap') {\n        map.setMapTypeId(kakao.maps.MapTypeId.ROADMAP);\n    } else {\n        map.setMapTypeId(kakao.maps.MapTypeId.HYBRID);\n    }\n};\n\n// 현재 위치 가져오기\nexport const getCurrentPosition = (option = { enableHighAccuracy: true }) => {\n    if ('geolocation' in navigator) {\n        /* 위치정보 사용 가능 */\n        return new Promise((res, rej) => {\n            navigator.geolocation.getCurrentPosition(res, rej);\n        });\n    } else {\n        /* 위치정보 사용 불가능 */\n        return null;\n    }\n};\n\n// 해당 위치로 이동\nexport const setCenter = (map, y, x) => {\n    const moveLatLng = new kakao.maps.LatLng(y, x);\n    map.setCenter(moveLatLng);\n};\n\nexport const setLevel = (map, level) => {\n    map.setLevel(level);\n};\n\nexport const getLevel = (map, level) => {\n    return map.getLevel();\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { AiOutlineMinus, AiOutlinePlus } from 'react-icons/all';\nimport { getLevel, setLevel } from '../../util/map/mapControl';\n\nconst StyledMapZoomControlDiv = styled.div`\n    position: absolute;\n    bottom: 2rem;\n    right: 1rem;\n    width: 36px;\n    height: 72px;\n    overflow: hidden;\n    background-color: #f5f5f5;\n    z-index: 10;\n\n    border: 1px solid #919191;\n    border-radius: 5px;\n\n    span {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        width: 36px;\n        height: 36px;\n        cursor: pointer;\n\n        svg {\n            flex: 1;\n            font-size: 22px;\n        }\n\n        &:first-child {\n            border-bottom: 1px solid #bfbfbf;\n        }\n    }\n`;\n\nconst KakaoMapZoomControl = () => {\n    const { map: kakaoMap } = useSelector((state) => ({\n        map: state.mapSetting.map,\n    }));\n\n    const zoomIn = () => setLevel(kakaoMap, getLevel(kakaoMap) - 1);\n    const zoomOut = () => setLevel(kakaoMap, getLevel(kakaoMap) + 1);\n\n    return (\n        <>\n            <StyledMapZoomControlDiv>\n                <span onClick={zoomIn}>\n                    <AiOutlinePlus />\n                </span>\n                <span onClick={zoomOut}>\n                    <AiOutlineMinus />\n                </span>\n            </StyledMapZoomControlDiv>\n        </>\n    );\n};\n\nexport default KakaoMapZoomControl;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { GrMapLocation, GrSatellite } from 'react-icons/all';\nimport { setMapType } from '../../util/map/mapControl';\n\nconst StyledMapTypeControlDiv = styled.div`\n    display: flex;\n    position: absolute;\n    top: 1rem;\n    right: 1rem;\n    width: 130px;\n    height: 30px;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    z-index: 10;\n\n    border: 1px solid #919191;\n    border-radius: 5px;\n\n    @media screen and (max-width: 768px) {\n        top: 10rem;\n    }\n\n    span {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        width: 65px;\n        height: 30px;\n        cursor: pointer;\n\n        svg {\n            flex: 1;\n            font-size: 22px;\n        }\n    }\n\n    .btn {\n        background: #fff;\n        background: linear-gradient(#fff, #e6e6e6);\n\n        &:hover {\n            background: #f5f5f5;\n            background: linear-gradient(#f5f5f5, #e3e3e3);\n        }\n\n        &:active {\n            background: #e6e6e6;\n            background: linear-gradient(#e6e6e6, #fff);\n        }\n    }\n\n    .selected_btn {\n        background: #40a9ff;\n\n        //&:hover {\n        //    color: #fff;\n        //}\n    }\n`;\n\nconst KakaoMapTypeControl = () => {\n    const { map: kakaoMap } = useSelector((state) => ({\n        map: state.mapSetting.map,\n    }));\n\n    const [roadmapCls, setRoadmapCls] = useState('selected_btn');\n    const [skyviewCls, setSkyviewCls] = useState('btn');\n\n    // 지도타입 컨트롤의 지도 또는 스카이뷰 버튼을 클릭하면 호출되어 지도타입을 바꾸는 함수입니다\n    const changeMapType = (maptype) => {\n        setMapType(kakaoMap, maptype);\n        if (maptype === 'roadmap') {\n            setRoadmapCls('selected_btn');\n            setSkyviewCls('btn');\n        } else {\n            setRoadmapCls('btn');\n            setSkyviewCls('selected_btn');\n        }\n    };\n\n    return (\n        <>\n            <StyledMapTypeControlDiv>\n                <span\n                    className={roadmapCls}\n                    onClick={() => changeMapType('roadmap')}\n                >\n                    <GrMapLocation />\n                </span>\n                <span\n                    className={skyviewCls}\n                    onClick={() => changeMapType('skyview')}\n                >\n                    <GrSatellite />\n                </span>\n            </StyledMapTypeControlDiv>\n        </>\n    );\n};\n\nexport default KakaoMapTypeControl;\n","/*global kakao*/\n\n/**************************\n * map 라이브러리\n **************************/\nimport 'antd/dist/antd.css';\n\n/**\n * 카테고리 검색\n * @param code 카테고리 코드\n * @param map 맵\n */\nexport const categorySearch = (map, code) => {\n    setMarkers(null);\n    markers = [];\n\n    let data = [];\n\n    const places = new kakao.maps.services.Places(map);\n\n    const callback = (result, status, pagination) => {\n        if (status === kakao.maps.services.Status.OK) {\n            data = [...result];\n\n            for (let i = 0; i < data.length; i++) {\n                displayMarkerWithInfo(map, data[i]);\n            }\n        }\n    };\n    // 카테고리 코드 검색\n    places.categorySearch(code, callback, {\n        useMapBounds: true,\n        size: 15,\n        page: 1,\n    });\n};\n\nlet markers = [];\n// 마커를 클릭하면 장소명을 표출할 인포윈도우 입니다\n\nlet infowindow = new kakao.maps.InfoWindow({\n    zIndex: 1,\n    removable: true,\n});\nlet overlay = new kakao.maps.CustomOverlay({ zIndex: 3, yAnchor: 1 });\n\nexport const displayMarkerWithInfo = (map, place) => {\n    // 마커를 생성하고 지도에 표시합니다\n    const marker = new kakao.maps.Marker({\n        map: map,\n        position: new kakao.maps.LatLng(place.y, place.x),\n        clickable: true, // 마커를 클릭했을 때 지도의 클릭 이벤트가 발생하지 않도록 설정합니다\n    });\n    markers.push(marker);\n\n    addEvent(marker, 'click', () => {\n        // infowindow.setContent(place.place_name);\n        // infowindow.open(map, marker);\n        overlay.setMap(map);\n        overlay.setContent(makeOverlayContent(place));\n        overlay.setPosition(marker.getPosition());\n        document.querySelector('.ant-popover').appendChild(closeBtn());\n    });\n};\n\n// 배열에 추가된 마커들을 지도에 표시하거나 삭제하는 함수입니다\nexport const setMarkers = (map) => {\n    for (var i = 0; i < markers.length; i++) {\n        markers[i].setMap(map);\n    }\n};\n\n// 검색리스트 클릭 시 마커 표시\nexport let searchMarker = null;\nexport const displaySearchMarker = (map, place) => {\n    if (!searchMarker) {\n        searchMarker = setMarker(map, place);\n    } else {\n        searchMarker.setPosition(new kakao.maps.LatLng(place.y, place.x));\n    }\n\n    addEvent(searchMarker, 'click', () => {\n        overlay.setMap(map);\n        overlay.setContent(makeOverlayContent(place));\n        overlay.setPosition(searchMarker.getPosition());\n        document.querySelector('.ant-popover').appendChild(closeBtn());\n    });\n};\n\nconst closeBtn = () => {\n    let closeEl = document.createElement('span');\n    closeEl.className = 'close';\n    closeEl.style.position = 'absolute';\n    closeEl.style.top = '5px';\n    closeEl.style.right = '-20px';\n    closeEl.style.background = '#000';\n    closeEl.style.color = '#fff';\n    closeEl.style.textAlign = 'center';\n    closeEl.style.width = '20px';\n    closeEl.style.height = '20px';\n    closeEl.style.fontSize = 'smaller';\n    closeEl.style.cursor = 'default';\n    closeEl.textContent = 'X';\n    closeEl.onclick = closeOverlay;\n    closeEl.title = '닫기';\n\n    return closeEl;\n};\n\nfunction makeOverlayContent(data) {\n    return `\n      <div class=\"ant-popover ant-popover-placement-top\" style=\"position: relative; top: -35px; max-width: 270px;\" >\n        <div class=\"ant-popover-content\">\n          <div class=\"ant-popover-arrow\">\n            <span class=\"ant-popover-arrow-content\"></span>\n          </div>\n          <div class=\"ant-popover-inner\" role=\"tooltip\">\n            <div class=\"ant-popover-title\" style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\">\n              <span title=\"${data.place_name}\">${data.place_name}</span> \n            </div>\n            <div class=\"ant-popover-inner-content\" style=\"font-size: x-small\">\n              <div style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\">\n                <span title=\"${data.address_name}\">${data.address_name}</span> <br />\n                <span title=\"${data.road_address_name}\">${data.road_address_name}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n}\n\n// // 커스텀 오버레이를 닫기 위해 호출되는 함수입니다\nconst closeOverlay = () => overlay.setMap(null);\n\n// 마커를 생성하고 지도에 표시합니다\nexport const setMarker = (map, place) =>\n    new kakao.maps.Marker({\n        map: map,\n        position: new kakao.maps.LatLng(place.y, place.x),\n    });\n\nexport const removeMarkers = () => {\n    const marker = new kakao.maps.Marker({\n        position: null,\n    });\n    marker.setMap(null);\n};\n\nexport const addEvent = (map, type, handler) => {\n    if (map) kakao.maps.event.addListener(map, type, handler);\n};\n\nexport const removeEvent = (map, type, handler) => {\n    if (map) kakao.maps.event.removeListener(map, type, handler);\n};\n","/*global kakao*/\nimport React from 'react';\nimport { Card, List } from 'antd';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { setCenter } from '../../util/map/mapControl';\nimport { BsBookmark, BsBookmarkFill } from 'react-icons/all';\nimport { AiFillCloseSquare } from 'react-icons/ai';\nimport { displaySearchMarker } from '../../util/map/mapService';\n\nconst SearchListDiv = React.memo(styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n    height: auto;\n    overflow: hidden;\n`);\n\nconst iconStyle = {\n    width: '1.2rem',\n    height: '1.2rem',\n};\n\nconst SearchList = ({\n    type,\n    data,\n    bookmarks,\n    onClickBookmark,\n    onClickClose,\n}) => {\n    const { map: kakaoMap } = useSelector((state) => ({\n        map: state.mapSetting.map,\n    }));\n\n    const onClick = (data) => {\n        setCenter(kakaoMap, data.y, data.x);\n        displaySearchMarker(kakaoMap, data);\n    };\n\n    return (\n        <SearchListDiv>\n            <Card\n                type=\"inner\"\n                size=\"small\"\n                title={type === 'result' ? '검색결과' : '북마크'}\n                bodyStyle={{ display: 'none' }}\n                extra={\n                    <AiFillCloseSquare\n                        style={{ fontSize: '1.5rem' }}\n                        onClick={onClickClose}\n                    />\n                }\n            />\n            <Card\n                size=\"small\"\n                style={{ flex: 1, height: '100%', overflow: 'auto' }}\n            >\n                <List\n                    itemLayout=\"horizontal\"\n                    dataSource={type === 'result' ? data : bookmarks}\n                    locale={{ emptyText: <div>No data</div> }}\n                    renderItem={(item) => (\n                        <List.Item>\n                            <List.Item.Meta\n                                title={item.data.place_name}\n                                description={item.data.road_address_name}\n                                onClick={() => onClick(item.data)}\n                                style={{ cursor: 'pointer' }}\n                            />\n                            {item.isbookmark === 'true' ? (\n                                <BsBookmarkFill\n                                    onClick={(e) => onClickBookmark(e, item)}\n                                    style={iconStyle}\n                                />\n                            ) : (\n                                <BsBookmark\n                                    onClick={(e) => onClickBookmark(e, item)}\n                                    style={iconStyle}\n                                />\n                            )}\n                        </List.Item>\n                    )}\n                />\n            </Card>\n        </SearchListDiv>\n    );\n};\n\nexport default React.memo(SearchList);\n","import axios from 'axios';\n\nexport const kakaoAxios = axios.create({\n    baseURL: `https://dapi.kakao.com`,\n    headers: {\n        Authorization: 'KakaoAK 6797801199c3b3d73ff33c7ca3edea88',\n    },\n});\n","import { kakaoAxios } from '../util/customAxios';\n\n/**\n * 키워드로 장소검색\n * @param keyword\n * @returns {Promise<AxiosResponse<any>>}\n */\nexport const getLocalSearchKeyword = (keyword) =>\n    kakaoAxios.get(`/v2/local/search/keyword.json?query=${keyword}`);\n\n/**\n * 카테고리로 장소검색\n * @param cate\n * @returns {Promise<AxiosResponse<any>>}\n */\nexport const getLocalSearchCategory = (cate) =>\n    kakaoAxios.get(\n        `/v2/local/search/category.json?category_group_code=${cate}`\n    );\n","import React, { useEffect, useState } from 'react';\nimport { Radio } from 'antd';\nimport { BsBookmark, BsList } from 'react-icons/all';\n\nfunction SearchBoxRadioButton({ onClickRadioButton, type }) {\n    const [checked, setChecked] = useState(false);\n    const [typeValue, setTypeValue] = useState('');\n\n    useEffect(() => {\n        setChecked(type === 'result');\n        setTypeValue(type);\n    }, [type]);\n\n    return (\n        <Radio.Group\n            size=\"large\"\n            value={typeValue}\n            onChange={onClickRadioButton}\n            style={{ display: 'flex' }}\n            id=\"radioGroup\"\n        >\n            <Radio.Button\n                value=\"result\"\n                style={{\n                    width: '100%',\n                    textAlign: 'center',\n                }}\n                id=\"radioButtonResult\"\n                checked={checked}\n            >\n                <BsList\n                    style={{\n                        width: '1.2rem',\n                        height: '1.2rem',\n                        verticalAlign: 'middle',\n                    }}\n                />{' '}\n                검색결과\n            </Radio.Button>\n            <Radio.Button\n                value=\"bookmark\"\n                style={{\n                    width: '100%',\n                    textAlign: 'center',\n                }}\n                id=\"radioButtonBookmark\"\n                checked={!checked}\n            >\n                <BsBookmark\n                    style={{\n                        width: '1.2rem',\n                        height: '1.2rem',\n                        verticalAlign: 'middle',\n                    }}\n                />{' '}\n                북마크\n            </Radio.Button>\n        </Radio.Group>\n    );\n}\n\nexport default SearchBoxRadioButton;\n","import React, { useMemo, useState } from 'react';\nimport { AutoComplete, Card, Input } from 'antd';\nimport {\n    AiOutlineClose,\n    AiOutlineLoading3Quarters,\n    AiOutlineSearch,\n} from 'react-icons/ai';\n\nconst AiOutlineLoading3QuartersSpin = () => (\n    <AiOutlineLoading3Quarters\n        style={{\n            width: '1.2rem',\n            height: '1.2rem',\n            animationName: 'rotate',\n            animationDuration: '1s',\n            animationIterationCount: 'infinite',\n            animationTimingFunction: 'linear',\n        }}\n    />\n);\n\nfunction SearchBoxInput({\n    query,\n    options,\n    onChange,\n    onSelect,\n    onKeyDown,\n    onReset,\n}) {\n    const [suffix, setSuffix] = useState(<AiOutlineSearch />);\n\n    const onChangeValue = (value) => {\n        setSuffix(<AiOutlineLoading3QuartersSpin />);\n        onChange(value);\n    };\n\n    const onSelectValue = (selected, option) => {\n        onSelect(selected, option);\n        setSuffix(<AiOutlineClose onClick={onResetValue} />);\n    };\n\n    const onResetValue = () => {\n        onReset();\n        setSuffix(<AiOutlineSearch />);\n    };\n\n    useMemo(() => {\n        setSuffix(\n            options.length > 0 ? (\n                <AiOutlineClose onClick={onResetValue} />\n            ) : (\n                <AiOutlineSearch />\n            )\n        );\n    }, [options]);\n\n    return (\n        <Card\n            size=\"small\"\n            title=\"REACT-KAKAO-MAP-TEST\"\n            bordered={false}\n            headStyle={{\n                backgroundColor: '#40a9ff',\n                color: '#fff',\n            }}\n            bodyStyle={{\n                backgroundColor: '#40a9ff',\n                color: '#fff',\n            }}\n        >\n            <AutoComplete\n                value={query}\n                options={options}\n                onChange={onChangeValue}\n                onSelect={onSelectValue}\n                style={{\n                    width: '100%',\n                }}\n            >\n                <Input suffix={suffix} size=\"large\" onKeyDown={onKeyDown} />\n            </AutoComplete>\n        </Card>\n    );\n}\n\nexport default SearchBoxInput;\n","/*global kakao*/\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport SearchList from './SearchList';\nimport { getLocalSearchKeyword } from '../../api/kakao';\nimport { setCenter } from '../../util/map/mapControl';\nimport SearchBoxRadioButton from './SearchBoxRadioButton';\nimport SearchBoxInput from './SearchBoxInput';\nimport { Col, Row } from 'antd';\nimport { displaySearchMarker } from '../../util/map/mapService';\n\nconst StyledSearchBox = React.memo(styled.div`\n    svg {\n        width: 1.5rem;\n        height: 1.5rem;\n    }\n\n    @keyframes rotate {\n        100% {\n            transform: rotate(360deg);\n        }\n    }\n`);\n\n// options 셋팅\nconst setResultList = (q, resultList) =>\n    resultList.map((result) => {\n        return {\n            query: q,\n            key: `${result.id}`,\n            value: `${result.id}`, // should be unique\n            text: `${result.place_name}`,\n            data: result,\n            isbookmark: 'false',\n            label: (\n                <div>\n                    <span>\n                        {result.place_name} <br />\n                        <span style={{ fontSize: '0.5rem' }}>\n                            {result.road_address_name}\n                        </span>\n                    </span>\n                </div>\n            ),\n        };\n    });\n\nconst SearchBox = () => {\n    const { map: kakaoMap } = useSelector((state) => ({\n        map: state.mapSetting.map,\n    }));\n    const [options, setOptions] = useState([]);\n    const [data, setData] = useState([]);\n    const [query, setQuery] = useState('');\n    const [visible, setVisible] = useState(false);\n    const [type, setType] = useState('result');\n    const [bookmarks, setBookmarks] = useState([]);\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            queryCallApi(query);\n        }, 300);\n        return () => clearTimeout(timeout);\n    }, [query]);\n\n    const queryCallApi = (q) => {\n        if (!q) {\n            onReset();\n            return;\n        }\n        getLocalSearchKeyword(q)\n            .then(({ data: { documents } }) => {\n                const hasData = documents.length > 0 ? true : false;\n                setOptions(hasData ? setResultList(q, documents) : []);\n            })\n            .catch((e) => {\n                throw new Error('키워드 검색 에러!');\n            });\n    };\n\n    const onChange = (value) => setQuery(value);\n\n    const onSelect = (selected, { text, data }) => {\n        // console.log('query: ', query, ' , text:', text);\n        setQuery(text);\n        setVisible(true);\n        if (query === text) setData(options);\n        else\n            getLocalSearchKeyword(text).then(({ data: { documents } }) =>\n                setData(setResultList(text, documents))\n            );\n\n        setCenter(kakaoMap, data.y, data.x);\n        displaySearchMarker(kakaoMap, data);\n    };\n\n    const onKeyDown = (e) => {\n        if (e.keyCode === 13) {\n            setVisible(true);\n            setType('result');\n\n            if (!options[0]?.query && options[0]?.query === query) {\n                setData(options);\n            } else\n                getLocalSearchKeyword(query).then(({ data: { documents } }) =>\n                    setData(setResultList(query, documents))\n                );\n        }\n    };\n\n    const onReset = () => {\n        setQuery('');\n        setOptions([]);\n    };\n\n    const onClose = () => setVisible(false);\n\n    const onClickRadioButton = (e) => {\n        setType(e.target.value);\n        setVisible(true);\n    };\n\n    const onClickBookmark = (e, item) => {\n        const bookmarkIndex = bookmarks.findIndex(\n            (bookmark) => bookmark.value === item.value\n        );\n\n        if (bookmarkIndex === -1) {\n            item.isbookmark = 'true';\n            setBookmarks([...bookmarks, item]);\n        } else {\n            item.isbookmark = 'false';\n            bookmarks.splice(bookmarkIndex, 1);\n            setBookmarks([...bookmarks]);\n        }\n    };\n\n    return (\n        <>\n            <Row\n                style={{\n                    flex: '0 1 0%',\n                    height: '100%',\n                }}\n            >\n                <Col\n                    xs={24}\n                    md={12}\n                    lg={8}\n                    xl={6}\n                    style={{\n                        flex: 1,\n                        height: '100%',\n                        display: 'flex',\n                        flexDirection: 'column',\n                    }}\n                >\n                    <StyledSearchBox>\n                        <SearchBoxInput\n                            query={query}\n                            options={options}\n                            onChange={onChange}\n                            onKeyDown={onKeyDown}\n                            onSelect={onSelect}\n                            onReset={onReset}\n                        />\n                        <SearchBoxRadioButton\n                            type={type}\n                            onClickRadioButton={onClickRadioButton}\n                        />\n                    </StyledSearchBox>\n                    {visible && (\n                        <SearchList\n                            type={type}\n                            data={data}\n                            bookmarks={bookmarks}\n                            onClickClose={onClose}\n                            onClickBookmark={onClickBookmark}\n                        />\n                    )}\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default React.memo(SearchBox);\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { BiCurrentLocation } from 'react-icons/all';\nimport {\n    getCurrentPosition,\n    setCenter,\n    setLevel,\n} from '../../util/map/mapControl';\n\nconst StyledMapCurrentPositionlDiv = styled.div`\n    position: absolute;\n    bottom: 7rem;\n    right: 1rem;\n    width: 36px;\n    height: 36px;\n    overflow: hidden;\n    background-color: #f5f5f5;\n    z-index: 10;\n\n    border: 1px solid #919191;\n    border-radius: 5px;\n\n    span {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        width: 36px;\n        height: 36px;\n        cursor: pointer;\n\n        svg {\n            flex: 1;\n            font-size: 22px;\n        }\n\n        &:first-child {\n            border-bottom: 1px solid #bfbfbf;\n        }\n    }\n`;\n\nconst KakaoMapCurrentPosition = () => {\n    const { map: kakaoMap } = useSelector((state) => ({\n        map: state.mapSetting.map,\n    }));\n\n    const setCurrentPosition = async () => {\n        try {\n            const { coords } = await getCurrentPosition({\n                enableHighAccuracy: true,\n            });\n            setCenter(kakaoMap, coords.latitude, coords.longitude);\n            setLevel(kakaoMap, 3);\n            // displayMarker(\n            //     { y: coords.latitude, x: coords.longitude },\n            //     kakaoMap\n            // );\n        } catch (e) {\n            throw new Error('set position error!');\n        }\n    };\n\n    return (\n        <>\n            <StyledMapCurrentPositionlDiv>\n                <span onClick={setCurrentPosition}>\n                    <BiCurrentLocation />\n                </span>\n            </StyledMapCurrentPositionlDiv>\n        </>\n    );\n};\n\nexport default KakaoMapCurrentPosition;\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { FiCoffee } from 'react-icons/all';\nimport {\n    addEvent,\n    categorySearch,\n    removeEvent,\n    setMarkers,\n} from '../../util/map/mapService';\n\nconst StyledMapCafeDisplayDiv = styled.div`\n    position: absolute;\n    top: 7rem;\n    right: 1rem;\n    width: 36px;\n    height: 36px;\n    overflow: hidden;\n    background-color: #f5f5f5;\n    z-index: 10;\n\n    border: 1px solid #919191;\n    border-radius: 5px;\n\n    @media screen and (max-width: 768px) {\n        top: 16rem;\n    }\n\n    span {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        width: 36px;\n        height: 36px;\n        cursor: pointer;\n\n        svg {\n            flex: 1;\n            font-size: 22px;\n        }\n\n        &:first-child {\n            border-bottom: 1px solid #bfbfbf;\n        }\n    }\n\n    .btn {\n        background: #fff;\n        background: linear-gradient(#fff, #e6e6e6);\n\n        &:hover {\n            background: #f5f5f5;\n            background: linear-gradient(#f5f5f5, #e3e3e3);\n        }\n\n        &:active {\n            background: #e6e6e6;\n            background: linear-gradient(#e6e6e6, #fff);\n        }\n    }\n\n    .selected_btn {\n        background: #b197fc;\n\n        //&:hover {\n        //    color: #fff;\n        //}\n    }\n`;\n\nconst KakaoMapCafeDisplay = () => {\n    const { map: kakaoMap } = useSelector((state) => ({\n        map: state.mapSetting.map,\n    }));\n\n    const [isClicked, setIsClicked] = useState(false);\n    const [cafeCls, setCafeCls] = useState('btn');\n\n    // 버튼 클릭 시 토글\n    const onClick = () => {\n        setIsClicked(!isClicked);\n    };\n\n    const handler = () => {\n        categorySearch(kakaoMap, 'CE7');\n    };\n    // 버튼 클릭 시 지도에 카페 위치 마커 표시\n\n    // 토글 on 일 때 지도 이동할 떄마다 현재 bound 에만 마커 표시\n    useEffect(() => {\n        if (!kakaoMap) return;\n        if (isClicked) {\n            setCafeCls('selected_btn');\n            handler();\n            addEvent(kakaoMap, 'dragend', handler);\n            addEvent(kakaoMap, 'zoom_changed', handler);\n            addEvent(kakaoMap, 'center_changed', handler);\n        } else {\n            setCafeCls('btn');\n        }\n\n        return () => {\n            // console.log('카페 버튼 컴포넌트 언마운트!');\n            setMarkers(null);\n            removeEvent(kakaoMap, 'dragend', handler);\n            removeEvent(kakaoMap, 'zoom_changed', handler);\n            removeEvent(kakaoMap, 'center_changed', handler);\n        };\n    }, [isClicked]);\n\n    return (\n        <>\n            <StyledMapCafeDisplayDiv>\n                <span className={cafeCls} onClick={onClick}>\n                    <FiCoffee />\n                </span>\n            </StyledMapCafeDisplayDiv>\n        </>\n    );\n};\n\nexport default KakaoMapCafeDisplay;\n","import React from 'react';\nimport KakaoMap from './components/KakaoMap';\nimport KakaoMapZoomControl from './components/map/KakaoMapZoomControl';\nimport KakaoMapTypeControl from './components/map/KakaoMapTypeControl';\nimport SearchBox from './components/search/SearchBox';\nimport KakaoMapCurrentPosition from './components/map/KakaoMapCurrentPosition';\nimport KakaoMapCafeDisplay from './components/map/KakaoMapCafeDisplay';\n\nfunction App() {\n    return (\n        <>\n            <KakaoMap>\n                <KakaoMapCafeDisplay />\n                <KakaoMapCurrentPosition />\n                <KakaoMapTypeControl />\n                <KakaoMapZoomControl />\n            </KakaoMap>\n            <SearchBox />\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\nimport mapSetting from './mapSetting';\n\nconst rootReducer = combineReducers({\n    mapSetting,\n});\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport rootReducer from './modules';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension'; // 리덕스 개발자 도구\n\nconst store = createStore(rootReducer, composeWithDevTools());\n// composeWithDevTools 를 사용하여 리덕스 개발자 도구 활성화\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}